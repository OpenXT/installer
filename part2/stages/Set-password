#!/bin/ash
#
# Copyright (c) 2011 Citrix Systems, Inc.
# Copyright (C) 2017 Jason Andryuk
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. ${SCRIPT_DIR}/functions
. ${MEASURED_LAUNCH_CONF}
. /usr/lib/openxt/key-functions

not_previous || exit ${Previous}

if ! keystore_ready; then
    setup_keystore
fi

# set file locations
admin_pass="${KEYDIR}/admin_pass"
# $PASSWORD_HASH, defined elsewhere, is also used

# If Measure Launch is disabled, a TPM password is unneeded.  Creating a
# placeholder here removes sprinkled ML checks throughout the code.
if [ ! "${MEASURE_LAUNCH}" = "true" ]; then
    echo BOGUS | store_own_key
fi

# Max password length
MAXPWLEN=64

# Password error types
ERR_MISMATCH=1
ERR_EMPTY=2

error_dialog() {
    local name="$1"
    local ret=$2
    local msg="  \ZbERROR:\ZB ${name} Password mismatch!\n\n    Please try again."
    if [ ${ret} -eq ${ERR_EMPTY} ]; then
        msg="  \ZbERROR:\ZB Empty ${name} password!\n\n    Please try again."
    fi

    hide_cursor
    dialog --colors --ok-label Continue --msgbox "${msg}" 7 40
}

check_and_save_password() {
    local file="$1"
    local first="$2"
    local second=$(( first + 1 ))
    local out="$3"

    local pw1=$( mktemp --tmpdir="${KEYDIR}" )
    sed -n "${first}p"  "${file}" | tr -d '\n' > "${pw1}"
    local pw2=$( mktemp --tmpdir="${KEYDIR}" )
    sed -n "${second}p" "${file}" | tr -d '\n' > "${pw2}"

    if ! diff -q "${pw1}" "${pw2}" 1>/dev/null 2>&1 ; then
        rm "${pw1}" "${pw2}"
        return ${ERR_MISMATCH}
    fi

    if [ ! -s "${pw1}" ] ; then
        rm "${pw1}" "${pw2}"
        return ${ERR_EMPTY}
    fi

    cp "${pw1}" "${out}"
    rm "${pw1}" "${pw2}"

    return 0
}

check_and_store_password() {
    local file="$1"
    local first="$2"
    local key="$3"
    local out="$( mktemp --tmpdir="${KEYDIR}" )"

    check_and_save_password "${file}" "${first}" "${out}"
    local ret=$?

    [ ${ret} -ne 0 ] && return ${ret}

    case "${key}" in
            recovery)
                store_recovery_key "${out}"
                ;;
            tpm)
                store_own_key "${out}"
                ;;
    esac

    rm "${out}"
    return 0
}

# Expects a file of 4 or 6 lines:
# admin password
# admin password re-type
# recovery password
# recovery password re-type
#  and if MEASURE_LAUNCH=true
# tpm password
# tpm password re-type
parse_passwords() {
    local file="$1"
    local ret=0
    local ret2=0
    local rows=4
    [ "${MEASURE_LAUNCH}" = "true" ] && rows=6
    if [ "$( wc -l ${file} | awk '{ print $1 }' )" -ne ${rows} ]; then
        return 1;
    fi

    if [ ! -s "${PASSWORD_HASH}" ]; then
        check_and_save_password "${file}" 1 "${admin_pass}"
        ret=$?
        if [ $ret -ne 0 ] ; then
            error_dialog "Admin" $ret
            ret2=1
        else
            openssl passwd -1 -in "${admin_pass}" | tr -d '\n' > "${PASSWORD_HASH}"
            rm -f "${admin_pass}"
        fi
    fi

    if ! have_recovery_key ; then
        check_and_store_password "${file}" 3 "recovery"
        ret=$?
        if [ $ret -ne 0 ] ; then
            error_dialog "Recovery" $ret
            ret2=1
        fi
    fi

    if ! have_own_key ; then
        check_and_store_password "${file}" 5 "tpm"
        ret=$?
        if [ $ret -ne 0 ] ; then
            error_dialog "TPM" $ret
            ret2=1
        fi
    fi

    return ${ret2}
}

query_passwords() {
    while true ; do
        local hidden=1
        local readonly=2
        local admin_needed=$hidden
        local recov_needed=$hidden
        local tpm_needed=$hidden
        [ -s ${PASSWORD_HASH} ] && admin_needed=$readonly
        have_recovery_key && recov_needed=$readonly
        have_own_key && tpm_needed=$readonly

        show_cursor
        local capture=$( mktemp --tmpdir="${KEYDIR}" )
        if [ ${MEASURE_LAUNCH} = "true" ]; then
            dialog --cancel-label Previous \
              --insecure \
              --title "Please enter system passwords" \
              --mixedform "\nPlease enter system passwords\nUp/Down arrows move between fields.\nTab to select Ok/Previous" 16 50 0 \
              "Admin Password   :" 1 1 "" 1 20 20 ${MAXPWLEN} ${admin_needed} \
              "Admin Password   :" 2 1 "" 2 20 20 ${MAXPWLEN} ${admin_needed} \
              "Recovery Password:" 3 1 "" 3 20 20 ${MAXPWLEN} ${recov_needed} \
              "Recovery Password:" 4 1 "" 4 20 20 ${MAXPWLEN} ${recov_needed} \
              "TPM Password     :" 5 1 "" 5 20 20 ${MAXPWLEN} ${tpm_needed} \
              "TPM Password     :" 6 1 "" 6 20 20 ${MAXPWLEN} ${tpm_needed} \
              2>${capture}
        else
            dialog --cancel-label Previous \
              --insecure \
              --title "Please enter system passwords" \
              --mixedform "\nPlease enter system passwords\nUp/Down arrows move between fields.\nTab to select Ok/Previous" 14 50 0 \
              "Admin Password   :" 1 1 "" 1 20 20 ${MAXPWLEN} ${admin_needed} \
              "Admin Password   :" 2 1 "" 2 20 20 ${MAXPWLEN} ${admin_needed} \
              "Recovery Password:" 3 1 "" 3 20 20 ${MAXPWLEN} ${recov_needed} \
              "Recovery Password:" 4 1 "" 4 20 20 ${MAXPWLEN} ${recov_needed} \
              2>${capture}
        fi

        local opt="$?"
        if [ ${opt} != 0 ] ; then
            rm -f ${capture}
            [ ${opt} != 1 ]   || exit ${Previous}
            [ ${opt} != 255 ] || exit ${Previous}
            exit ${Abort}
        fi

        if ! parse_passwords ${capture} ; then
            rm -f ${capture}
            continue
        fi

        hide_cursor
        rm -f ${capture}
        break
    done
}

need_passwords() {
    # We require passwords to have a length
    [ -s "${PASSWORD_HASH}" ] || return 0
    have_recovery_key || return 0
    have_own_key || return 0
    return 1
}

error_missing_password() {
    if [ ! -e "${PASSWORD_HASH}" ]; then
        echo "ERROR: answerfile does not specify password or deferred password" >&2
    fi

    if have_recovery_key && have_own_key ; then
       return
    fi

    echo "ERROR: The following password file(s) were not provided:" >&2
    ! have_recovery_key && echo "  Recovery password" >&2
    ! have_own_key && echo "  TPM Owner password" >&2
    cat << EOF >&2
Specify the plaintext passwords in your answerfile with
<recovery-password> and <tpm-owner-password>.

If you are concerned about plaintext passwords in your answerfile, add a
snippet like:
<preinstall>
#!/bin/sh
source /usr/lib/openxt/key-functions
setup_keystore
cd \${KEYMNT}
wget -q -O - http://\$http_server/keys.tar.gz | tar -zxf -
store_recovery_key recovery_password
store_own_key tpm_owner_password
rm recovery_password tpm_owner_password
</preinstall>
to your answer file to populate the TPM Owner password and Recovery
password where keys.tar.gz contains files recovery_password and
tpm_owner_password without trailing newlines.
EOF
}

parse_answer_file_passwords() {
    if answerfile_specifies "password" ; then
        local password=$(read_xml_tag "${ANSWERFILE}" "password")
        local defer_password=$(read_xml_attr "${ANSWERFILE}" "password" "defer")

        if [ "${defer_password}" = "true" ] ; then
            if [ -n "${password}" ] ; then
                echo "ERROR: answerfile specifies that password configuration" \
                     "should be deferred but also specifies password" >&2
                exit "${Abort}"
            fi

            # Password configuration deferred until first boot. Set an invalid
            # password to prevent login until password has been set.
            password='!'
            touch ${PASSWORD_DEFERRED}
        fi

        echo -n "${password}" > ${PASSWORD_HASH}
    fi
}

parse_answer_file_passwords

if need_passwords; then
    if interactive; then
        query_passwords
    else
        error_missing_password
        exit ${Abort}
    fi
fi

exit ${Continue}
