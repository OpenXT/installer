#!/bin/ash
#
# Copyright (c) 2013 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. ${SCRIPT_DIR}/functions
. ${MEASURED_LAUNCH_CONF}

if [ "${MEASURE_LAUNCH}" = "false" ]; then
    exit ${Continue}
fi

TPM_FUNCS=/usr/lib/tpm-scripts/tpm-functions
KEY_FUNCS=/usr/lib/openxt/key-functions
if [ ! -f ${TPM_FUNCS} ]; then
    echo "No tpm-function library found at ${TPM_FUNCS}.  ABORT" >&2
    exit ${Abort}
else
    . ${TPM_FUNCS}
fi

if [ ! -f ${KEY_FUNCS} ]; then
    echo "No key-functions library found at ${KEY_FUNCS}.  ABORT" >&2
    exit ${Abort}
else
    . ${KEY_FUNCS}
fi

if [ ! -d /sys/firmware/efi/efivars ]; then
    MLE_FUNCS=/usr/lib/openxt/ml-functions
    if [ ! -f ${MLE_FUNCS} ]; then
        echo "No ml-function library found at ${MLE_FUNCS}.  ABORT" >&2
        exit ${Abort}
    else
        . ${MLE_FUNCS}
    fi
fi

CHECK_MSG="Checking availability of TXT & TPM."
TPM_GAUGE=4
TPM_GAUGE_STEP=16

not_previous || exit ${Previous}

# progress guage
update_gauge() {
    local msg="$1"
    local percent=$2
    interactive && dialog --mixedgauge "${msg}" 11 40 ${percent}
}
# dump attributes of the systems TPM into the log
log_tpm_attrs() {
    is_tpm_2_0
    tpm2=$?
    if [ "${tpm2}" -eq 0 ];
    then
        tpm2_getcap --capability=properties-fixed >&2
    else
        tpm_version >&2
    fi
    if [ $? -ne 0 ]; then
        echo "Error getting TPM Version data" >&2
        return 1
    fi
    return 0
}

quirk_callback () {
    if interactive && [ -n "$1" ]; then
        dialog --ok-label Continue --msgbox "$1" 0 0
    fi
}

quirk_fatal_callback () {
    interactive && dialog --ok-label Abort --msgbox "$1" 0 0
}

# detect quirks
quirk_detect "quirk_callback" "quirk_fatal_callback"
[ $? -ne 0 ] && {
    echo "Platform has known a fatal quirk, exiting." >&2
    exit 1
}

update_gauge "${CHECK_MSG}" ${TPM_GAUGE}

# The TrouSerS daemon should already be running, tcsd_start checks for that
#   first and just succeeds if it is running.
tcsd_start || exit ${TpmDisabled}

TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
update_gauge "${CHECK_MSG}" ${TPM_GAUGE}
# Detect if TPM is enabled. If it's not, there's little we can do beyond
#   attempting to enable it.
tpm_is_enabled
case $? in
    0)  TPM_ENABLED='true' ;;
    1)  TPM_ENABLED='false' ;;
    2)  echo "Can't determine if TPM is enabled" >&2
        exit ${Abort}
        ;;
    *)  echo "tpm_is_enabled: This shouldn't happen!" >&2
        exit ${Abort}
        ;;
esac

# Detect if TPM is active. If it's not, there's little we can do beyond
#   attempting to activate it.
tpm_is_active
case $? in
    0)  TPM_STATE='active' ;;
    1)  exit ${TpmInactive} ;;
    2)  echo "can't tell if TPM is active?" >&2
        exit ${Abort}
        ;;
    *)  echo "tpm_is_active: This shouldn't happen!" >&2
        exit ${Abort}
        ;;
esac

# Determine if the TPM has an EK
tpm_has_ek
case $? in
    0)  TPM_EK='true' ;;
    1)  TPM_EK='false' ;;
    2)  echo "can't tell if TPM has an EK?" >&2
        exit ${Abort}
        ;;
    3)  echo "TPM in dictionary attack timeout" >& 2
        exit ${TpmTimeout}
        ;;
    *)  echo "tpm_has_ek: This shouldn't happen!" >&2
        exit ${Abort}
        ;;
esac

# TPM is active. Now check to see if anyone has taken ownership of it.
tpm_is_owned
case $? in
    0)  # should eventually be able to handle this through user interaction:
        # password dialog etc
        TPM_OWNED='true'
        TPM_SRK='true'
        ;;
    1)  TPM_OWNED='false'
        TPM_SRK='false'
        ;;
    2)  echo "can't tell if TPM is owned?" >&2
        exit ${Abort}
        ;;
    *)  echo "tpm_is_owned: This shouldn't happen!" >&2
        exit ${Abort}
        ;;
esac

[ "${TPM_OWNED}" = "true" ] && {
    tpm_check_owner_password "$(get_own_key)"
    case $? in
        0)  ;;
        1)  exit ${TpmOwned}
            ;;
        2)  echo "can't tell if we know owner password" >&2
            exit ${Abort}
            ;;
        3)  echo "TPM in dictionary attack timeout" >& 2
            exit ${TpmTimeout}
            ;;
        *)  echo "tpm_check_owner_password: This shouldn't happen!" >&2
            exit ${Abort}
            ;;
    esac
}

TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
update_gauge "${CHECK_MSG}" ${TPM_GAUGE}

[ "${TPM_SRK}" = "true" ] && {
    tpm_is_srk_wks
    case $? in
        0)  TPM_SRK_WKS='true' ;;
        1)  TPM_SRK_WKS='false'
            exit ${TpmBadSrk}
            ;;
        2)  echo "can't determine if SRK is WKS" >&2
            exit ${Abort}
            ;;
        3)  echo "TPM in dictionary attack timeout" >& 2
            exit ${TpmTimeout}
            ;;
        *) ;;
    esac
}

TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
update_gauge "${CHECK_MSG}" ${TPM_GAUGE}
log_tpm_attrs || exit ${Abort}

if [ ! -d /sys/firmware/efi/efivars ]; then
    TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
    update_gauge "${CHECK_MSG}" ${TPM_GAUGE}
    mle_success || exit ${TxtFail}
fi

TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
update_gauge "${CHECK_MSG}" ${TPM_GAUGE}

TPM_GAUGE=$((${TPM_GAUGE}+${TPM_GAUGE_STEP}))
update_gauge "${CHECK_MSG}" ${TPM_GAUGE}

echo "TPM_STATE='${TPM_STATE}'" >> ${MEASURED_LAUNCH_CONF}
echo "TPM_OWNED='${TPM_OWNED}'" >> ${MEASURED_LAUNCH_CONF}
echo "TPM_SRK='${TPM_SRK}'" >> ${MEASURED_LAUNCH_CONF}
echo "TPM_EK='${TPM_EK}'" >> ${MEASURED_LAUNCH_CONF}
echo "SRK_TSS_WELL_KNOWN_SECRET='${SRK_TSS_WELL_KNOWN_SECRET}'" >> ${MEASURED_LAUNCH_CONF}

exit ${Continue}
