#!/bin/ash
#
# Copyright (c) 2017 Assured Information Security, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. ${SCRIPT_DIR}/functions

. ${DISK_CONF}
# ^^^ defines ${TARGET_DISK}

# Remove every VG assigned to that disk.
vgs=$(vgs --noheading -o vg_name)
for vg in ${vgs}; do
    # List all PV backing current VG.
    pvs="$(vgs --noheading -o pv_name ${vg})"
    pvs_on_target=""
    pvs_others=""
    for p in ${pvs}; do
        dev=$(sanitize_devnode "${p}")
        if [ "${dev##${TARGET_DISK}}" != "${dev}" ]; then
            pvs_on_target="${pvs_of_vg} ${dev}"
        else
            pvs_others="${pvs_of_vg} ${dev}"
        fi
    done

    # Ignore VG not on the target disk.
    if [ -z "${pvs_on_target}" ]; then
        continue
    fi

    # If possible, try to move PE to non-targeted PV.
    # Otherwise, assume the user is knowingly wiping the entire disk with every
    # LV/VG on it (common use case involving only one disk).
    if [ -n "${pvs_others}" ]; then
        for pv in ${pvs_on_target}; do
            if ! pvmove ${pv} ${pvs_others} >&2; then
                # We should probably ask for confirmation here...
                # Maybe this was done willingly.
                exit ${Abort}
            fi
            # Remove each PV on the target disk from the VG.
            do_cmd vgreduce ${vg} ${pv} >&2
        done
    else
        # Every PV on the target disk, so wipe the VG.
        do_cmd vgremove -f ${vg} >&2
    fi

    # Wipe labels on each PV.
    for pv in ${pvs_on_target}; do
        do_cmd pvremove -f ${pv} >&2
    done
done

# Remove GPT partition table
do_cmd sgdisk -Z /dev/${TARGET_DISK} >&2
reread_partition_table "/dev/${TARGET_DISK}"

exit ${Continue}
